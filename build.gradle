import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
    id "com.peterabeles.gversion" version "1.9"
    id "net.ltgt.errorprone" version "1.2.1" apply false
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group = 'org.georegression'
    version = '0.23-SNAPSHOT'
}

gversion {
    srcDir = "main/src"
    classPackage = "georegression"
    className = "GeoRegressionVersion"
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'net.ltgt.errorprone'

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    // Creates Java 8 byte code
    compileJava {
        options.compilerArgs = [ "--release", "8"  ]
    }

    // Crap to make Error Prone plugin not cause version conflicts
    // https://github.com/tbroyer/gradle-errorprone-plugin/issues/16
    configurations {
        [annotationProcessor, testAnnotationProcessor].each {
            it.resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
            it.resolutionStrategy.force "com.google.errorprone:error_prone_annotations:2.4.0"
            it.resolutionStrategy.force "com.google.guava:guava:27.0.1-jre"
            it.resolutionStrategy.force "org.checkerframework:checker-qual:2.10.0"
        }
    }

    // Fail on jar conflict
    configurations.all {
        resolutionStrategy { failOnVersionConflict() }
    }

    repositories {
        mavenCentral()
        mavenLocal()

        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url = 'https://jitpack.io' } // Allows annotations past Java 8 to be used
    }

    sourceSets {
        main {
            java { srcDir 'src' }
            resources { srcDir 'resources/src' }
        }

        test {
            java {
                srcDir 'test'
                srcDir 'generate'
                srcDir 'benchmark'
            }
            resources { srcDir 'resources/test' }
        }
    }

    dependencies {
        implementation (group: 'org.ddogleg', name: 'ddogleg', version: '0.19-SNAPSHOT')

        compileOnly 'org.jetbrains:annotations:20.0.0' // @Nullable
        compileOnly 'javax.annotation:jsr250-api:1.0'  // @Generated
        testCompileOnly project.sourceSets.main.compileClasspath

        testImplementation( 'org.junit.jupiter:junit-jupiter-api:5.4.0' )
        testRuntimeOnly( 'org.junit.jupiter:junit-jupiter-engine:5.4.0' )

        // needed to use Java 11+ syntax with Java 1.8 byte code
        annotationProcessor('com.github.bsideup.jabel:jabel-javac-plugin:0.2.0'){
            exclude group: 'net.bytebuddy', module: 'byte-buddy'
            exclude group: 'net.bytebuddy', module: 'byte-buddy-agent'
        }
        annotationProcessor("net.bytebuddy:byte-buddy:1.10.10")
        annotationProcessor("net.bytebuddy:byte-buddy-agent:1.10.10")

        errorprone( "com.google.errorprone:error_prone_core:2.4.0" )
        errorproneJavac( "com.google.errorprone:javac:9+181-r4173-1" )

        // even if it's not used you still need to include the dependency
        annotationProcessor "com.uber.nullaway:nullaway:0.8.0"
        testAnnotationProcessor "com.uber.nullaway:nullaway:0.8.0"
    }

    tasks.withType(JavaCompile).configureEach {
        options.errorprone.enabled = true
        options.errorprone.disableWarningsInGeneratedCode = true
        options.errorprone.disable("TypeParameterUnusedInFormals","StringSplitter","InconsistentCapitalization",
                "HidingField", // this is sometimes done when the specific type is known by child. Clean up later.
                "ClassNewInstance", // yes it's deprecated, but new version is more verbose with ignored errors
                "FloatingPointLiteralPrecision", // too many false positives in test code
                "MissingSummary","UnescapedEntity","EmptyBlockTag")
        options.errorprone.error("MissingOverride","MissingCasesInEnumSwitch","BadInstanceof",
                "PublicConstructorForAbstractClass","EmptyCatch","NarrowingCompoundAssignment","JdkObsolete")

        if( name.startsWith("compileTest") ) {
            options.errorprone.disable("ReferenceEquality","IntLongMath","ClassCanBeStatic")
        }

        options.errorprone {
            check("NullAway", CheckSeverity.ERROR)
            option("NullAway:TreatGeneratedAsUnannotated", true)
            option("NullAway:AnnotatedPackages", "georegression")
        }
    }

    test {
        ignoreFailures true
    }

    javadoc {
        configure(options) {
            links = ['http://docs.oracle.com/javase/8/docs/api/',
                     'http://ejml.org/javadoc/',
                     'http://ddogleg.org/javadoc/']
            failOnError = false
            enabled = !project.version.contains("SNAPSHOT") // disable to stop it from spamming stdout
        }
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    // Force uploadArchives to fail if trying to upload a stable release and git is dirty
    uploadArchives.dependsOn failDirtyNotSnapshot

    // if Maven central isn't setup in gradle.properties skip all of this
    if (project.hasProperty('ossrhUsername')) {
        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name 'GeoRegression'
                        packaging 'pom'
                        // optionally artifactId can be defined here
                        description 'GeoRegression is a free Java based geometry library for scientific computing in fields such as robotics and computer vision with a focus on 2D/3D space.'
                        url 'http://georegression.org'

                        scm {
                            connection 'scm:git:git@github.com:lessthanoptimal/georegression.git'
                            developerConnection 'scm:git:git@github.com:lessthanoptimal/georegression.git'
                            url 'https://github.com/lessthanoptimal/GeoRegression'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id 'pabeles'
                                name 'Peter Abeles'
                                email 'peter.abeles@gmail.com'
                            }
                        }
                    }
                }
            }
        }
    }
}

// Creates a directory with all the compiled jars and the dependencies
def mainProjects = [':georegression',":experimental"]
task createLibraryDirectory( dependsOn: mainProjects.collect {[ it+':jar',it+':sourcesJar']}.flatten() ) {

    doLast {
        ext.listExternal = files(mainProjects.collect { project(it).configurations.compile })
        ext.listInternal = files(mainProjects.collect { project(it).tasks.jar.archivePath })
        ext.listSource = files(mainProjects.collect { project(it).tasks.sourcesJar.archivePath })

        ext.listExternal = ext.listExternal - ext.listInternal

        file('libraries').deleteDir()
        file('libraries').mkdir()

        copy {
            from ext.listExternal
            into 'libraries'
        }

        copy {
            from ext.listInternal
            from ext.listSource
            into 'libraries'

            rename { String fileName ->
                "GeoRegression-" + fileName
            }
        }
    }
}

def javadocProjects = [
        ':georegression',
]
task alljavadoc(type: Javadoc) {
    // only include source code in src directory to avoid including 3rd party code which some projects do as a hack
    source = javadocProjects.collect { project(it).fileTree('src').include('**/*.java') }
    classpath = files(javadocProjects.collect { project(it).sourceSets.main.compileClasspath })

    destinationDir = file("${buildDir}/docs/javadoc")

    // Hack for Java 8u121 and beyond. Comment out if running an earlier version of Java
    options.addBooleanOption("-allow-script-in-comments", true)
    options.addBooleanOption("-no-module-directories", true)

    // Add a list of uses of a class to javadoc
    options.use = true

    configure(options) {
        failOnError = false
        docTitle = "GeoRegression v$project.version"
        links = [ 'http://docs.oracle.com/javase/8/docs/api/',
                  'http://ejml.org/javadoc/',
                  'http://ddogleg.org/javadoc/' ]
    }
}

task javadocWeb(type: Javadoc) {
    // only include source code in src directory to avoid including 3rd party code which some projects do as a hack
    source = javadocProjects.collect { project(it).fileTree('src').include('**/*.java') }
    classpath = files(javadocProjects.collect { project(it).sourceSets.main.compileClasspath })

    destinationDir = file("${buildDir}/docs/javadoc")

    // Hack for Java 8u121 and beyond. Comment out if running an earlier version of Java
    options.addBooleanOption("-allow-script-in-comments", true)
    options.addBooleanOption("-no-module-directories", true)

    // Add a list of uses of a class to javadoc
    options.use = true

    configure(options) {
        failOnError = false
        docTitle = "GeoRegression v$project.version"
        links = [ 'http://docs.oracle.com/javase/8/docs/api/',
                  'http://ejml.org/javadoc/',
                  'http://ddogleg.org/javadoc/' ]
        bottom = file('docs/bottom.txt').text
    }
}

project(':georegression').compileJava.dependsOn(createVersionFile)

// Disable the creation of jars for distribution.  If you don't do this it will crash
[':examples','autocode'].each {String a ->
    project(a) {
        if( project.hasProperty('ossrhUsername') ) {
            signArchives.enabled = false
        }
        sourcesJar.enabled = false
        javadocJar.enabled = false
        jar.enabled = false
        uploadArchives.enabled = false
        install.enabled = false
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = '6.4.1'
}